return {
  {
    'catppuccin/nvim',
    name = 'catppuccin',
    priority = 1000,
    lazy = false,
    config = function()
      require('catppuccin').setup({
        flavour = 'mocha',
        transparent_background = true,
        styles = {
          comments = { 'italic' },
          functions = { 'bold' },
          keywords = { 'bold', 'italic' },
          operators = { 'bold' },
          conditionals = { 'bold' },
          loops = { 'bold' },
          booleans = { 'bold', 'italic' },
        },
        custom_highlights = function(colors)
          return {
            Visual = { bg = colors.red, fg = colors.surface0 },
          }
        end,
        integrations = {
          overseer = true,
          snacks = true,
          dashboard = true,
          headlines = true,
          flash = true,
          leap = true,
          neotree = true,
          mason = true,
          markdown = true,
          noice = true,
          notifier = true,
          harpoon = true,
          cmp = true,
          blink_cmp = true,
          native_lsp = {
            enabled = true,
            underlines = {
              errors = { 'undercurl' },
              hints = { 'undercurl' },
              warnings = { 'undercurl' },
              information = { 'undercurl' },
            },
          },
          gitsigns = true,
          treesitter = true,
          lsp_trouble = true,
          telescope = true,
          fzf = true,
          navic = { enabled = true, custom_bg = 'lualine' },
          treesitter_context = true,
          notify = true,
          mini = {
            enabled = true,
            indentscope_color = 'pink',
          },
          which_key = true,
          semantic_tokens = true,
        },
        highlight_overrides = {
          mocha = function(colors)
            return {
              BlinkCmpMenu = { bg = 'black' },
              BlinkCmpLabel = { bg = colors.none, fg = colors.peach },
              BlinkCmpKind = { bg = colors.none, fg = colors.none },
              BlinkCmpMenuSelection = { bg = colors.red, fg = colors.mantle },
              BlinkCmpScrollBarGutter = { bg = colors.surface2 },
              BlinkCmpScrollBarThumb = { bg = colors.peach },
              CmpItemMenu = { fg = colors.surface2 },
              Pmenu = { bg = 'black' },
              PmenuSel = { bg = colors.red, fg = colors.mantle },
              PmenuSbar = { bg = colors.surface2 },
              PmenuThumb = { bg = colors.red },
              CursorLineNr = { fg = colors.green },
              FloatBorder = { bg = colors.none, fg = colors.pink }, -- colors.surface0 }, difficult to see
              GitSignsChange = { fg = colors.peach },
              LineNr = { fg = colors.overlay0 },
              LspInfoBorder = { link = 'FloatBorder' },
              NeoTreeDirectoryIcon = { fg = colors.pink },
              NeoTreeDirectoryName = { fg = colors.pink },
              NeoTreeFloatBorder = { bg = colors.none, fg = colors.none },
              NeoTreeGitConflict = { fg = colors.red },
              NeoTreeGitDeleted = { fg = colors.red },
              NeoTreeGitIgnored = { fg = colors.overlay0 },
              NeoTreeGitModified = { fg = colors.peach },
              NeoTreeGitStaged = { fg = colors.green },
              NeoTreeGitUnstaged = { fg = colors.red },
              NeoTreeGitUntracked = { fg = colors.green },
              NeoTreeIndent = { fg = colors.surface1 },
              NeoTreeNormal = { bg = colors.none },
              NeoTreeNormalNC = { bg = colors.none },
              NeoTreeRootName = { fg = colors.blue, style = { 'bold' } },
              NeoTreeTabActive = { fg = colors.text, bg = colors.mantle },
              NeoTreeTabInactive = { fg = colors.surface2, bg = colors.crust },
              NeoTreeTabSeparatorActive = { fg = colors.mantle, bg = colors.mantle },
              NeoTreeTabSeparatorInactive = { fg = colors.crust, bg = colors.crust },
              NeoTreeWinSeparator = { fg = colors.pink, bg = colors.none },
              NormalFloat = { bg = colors.base },
              -- telescope prompt
              TelescopePromptTitle = { fg = colors.mantle, bg = colors.green, style = { 'bold' } },
              TelescopePromptCounter = { fg = colors.red, style = { 'bold' } },
              TelescopePromptBorder = { bg = colors.none },
              -- telescope results
              TelescopeResultsTitle = { link = 'TelescopePromptTitle' },
              TelescopeResultsBorder = { link = 'TelescopePromptBorder' },
              -- telescope preview
              TelescopePreviewTitle = { link = 'TelescopePromptTitle' },
              TelescopePreviewBorder = { link = 'TelescopePromptBorder' },
              FzfLuaFzfMatch = { fg = colors.red },
              FzfLuaFzfPrompt = { fg = colors.red },
              FzfLuaPathColNr = { fg = colors.red },
              VertSplit = { bg = colors.base, fg = colors.surface0 },
              WhichKeyFloat = { bg = colors.mantle, fg = colors.pink },
              YankHighlight = { bg = colors.surface2 },
              IblIndent = { fg = colors.overlay2 },
              IblScope = { fg = colors.overlay0 },

              Boolean = { fg = colors.peach },
              Number = { fg = colors.mauve },
              Float = { fg = colors.mauve },

              PreProc = { fg = colors.mauve },
              PreCondit = { fg = colors.mauve },
              Include = { fg = colors.red },
              Define = { fg = colors.mauve },
              Conditional = { fg = colors.red },
              Repeat = { fg = colors.red },
              Keyword = { fg = colors.red },
              Typedef = { fg = colors.red },
              Exception = { fg = colors.red },
              Statement = { fg = colors.red },
              Error = { fg = colors.red },
              StorageClass = { fg = colors.red },
              Tag = { fg = colors.red },
              Label = { fg = colors.peach },
              Structure = { fg = colors.peach },
              Operator = { fg = colors.sapphire },
              Title = { fg = colors.peach },
              Special = { fg = colors.yellow },
              SpecialChar = { fg = colors.yellow },
              Type = { fg = colors.yellow, style = { 'bold' } },
              Function = { fg = colors.sapphire, style = { 'bold' } },
              Delimiter = { fg = colors.subtext1 },
              Ignore = { fg = colors.subtext1 },
              Macro = { fg = colors.teal },

              TSAnnotation = { fg = colors.mauve },
              TSAttribute = { fg = colors.mauve },
              TSBoolean = { fg = colors.peach, style = { 'bold', 'italic' } },
              TSCharacter = { fg = colors.teal },
              TSCharacterSpecial = { link = 'SpecialChar' },
              TSComment = { link = 'Comment' },
              TSConditional = { fg = colors.red },
              TSConstBuiltin = { fg = colors.mauve },
              TSConstMacro = { fg = colors.mauve },
              TSConstant = { fg = colors.text },
              TSConstructor = { fg = colors.teal },
              TSDebug = { link = 'Debug' },
              TSDefine = { link = 'Define' },
              TSEnvironment = { link = 'Macro' },
              TSEnvironmentName = { link = 'Type' },
              TSError = { link = 'Error' },
              TSException = { fg = colors.red },
              TSField = { fg = colors.pink },
              TSFloat = { fg = colors.mauve },
              TSFuncBuiltin = { fg = colors.pink },
              TSFuncMacro = { fg = colors.yellow },
              TSFunction = { fg = colors.pink },
              TSFunctionCall = { fg = colors.pink },
              TSInclude = { fg = colors.red },
              TSKeyword = { fg = colors.red },
              TSKeywordFunction = { fg = colors.red },
              TSKeywordOperator = { fg = colors.blue, style = { 'bold' } },
              TSKeywordReturn = { fg = colors.red, style = { 'bold' } },
              TSLabel = { fg = colors.peach },
              TSLiteral = { link = 'String' },
              TSMath = { fg = colors.blue },
              TSMethod = { fg = colors.pink },
              TSMethodCall = { fg = colors.pink },
              TSNamespace = { fg = colors.pink },
              TSNone = { fg = colors.text },
              TSNumber = { fg = colors.mauve },
              -- TSOperator = { fg = colors.sapphire },
              TSOperator = { fg = colors.blue },
              TSParameter = { fg = colors.pink },
              TSParameterReference = { fg = colors.red },
              TSPreProc = { link = 'PreProc' },
              TSProperty = { fg = colors.yellow },
              TSPunctBracket = { fg = colors.text },
              TSPunctDelimiter = { link = 'Delimiter' },
              TSPunctSpecial = { fg = colors.blue },
              TSRepeat = { fg = colors.red },
              TSStorageClass = { fg = colors.peach },
              TSStorageClassLifetime = { fg = colors.peach },
              TSStrike = { fg = colors.subtext1 },
              TSString = { fg = colors.teal },
              TSStringEscape = { fg = colors.teal },
              TSStringRegex = { fg = colors.teal },
              TSStringSpecial = { link = 'SpecialChar' },
              TSSymbol = { fg = colors.text },
              TSTag = { fg = colors.red },
              TSTagAttribute = { fg = colors.pink },
              TSTagDelimiter = { fg = colors.teal },
              TSText = { fg = colors.teal },
              TSTextReference = { link = 'Constant' },
              TSTitle = { link = 'Title' },
              TSTodo = { link = 'Todo' },
              TSType = { fg = colors.yellow, style = { 'bold' } },
              TSTypeBuiltin = { fg = colors.yellow, style = { 'bold' } },
              TSTypeDefinition = { fg = colors.yellow, style = { 'bold' } },
              TSTypeQualifier = { fg = colors.peach, style = { 'bold' } },
              TSURI = { fg = colors.blue },
              TSVariable = { fg = colors.pink },
              TSVariableBuiltin = { fg = colors.red },

              ['@annotation'] = { link = 'TSAnnotation' },
              ['@attribute'] = { link = 'TSAttribute' },
              ['@boolean'] = { link = 'TSBoolean' },
              ['@character'] = { link = 'TSCharacter' },
              ['@character.special'] = { link = 'TSCharacterSpecial' },
              ['@comment'] = { link = 'TSComment' },
              ['@conceal'] = { link = 'Grey' },
              ['@conditional'] = { link = 'TSConditional' },
              ['@constant'] = { link = 'TSConstant' },
              ['@constant.builtin'] = { link = 'TSConstBuiltin' },
              ['@constant.macro'] = { link = 'TSConstMacro' },
              ['@constructor'] = { link = 'TSConstructor' },
              ['@debug'] = { link = 'TSDebug' },
              ['@define'] = { link = 'TSDefine' },
              ['@error'] = { link = 'TSError' },
              ['@exception'] = { link = 'TSException' },
              ['@field'] = { link = 'TSField' },
              ['@float'] = { link = 'TSFloat' },
              ['@function'] = { link = 'TSFunction' },
              ['@function.builtin'] = { link = 'TSFuncBuiltin' },
              ['@function.call'] = { link = 'TSFunctionCall' },
              ['@function.macro'] = { link = 'TSFuncMacro' },
              ['@include'] = { link = 'TSInclude' },
              ['@keyword'] = { link = 'TSKeyword' },
              ['@keyword.function'] = { link = 'TSKeywordFunction' },
              ['@keyword.operator'] = { link = 'TSKeywordOperator' },
              ['@keyword.return'] = { link = 'TSKeywordReturn' },
              ['@keyword.export'] = { link = 'TSKeyword' },
              ['@label'] = { link = 'TSLabel' },
              ['@math'] = { link = 'TSMath' },
              ['@method'] = { link = 'TSMethod' },
              ['@method.call'] = { link = 'TSMethodCall' },
              ['@namespace'] = { link = 'TSNamespace' },
              ['@none'] = { link = 'TSNone' },
              ['@number'] = { link = 'TSNumber' },
              ['@operator'] = { link = 'TSOperator' },
              ['@parameter'] = { link = 'TSParameter' },
              ['@parameter.reference'] = { link = 'TSParameterReference' },
              ['@preproc'] = { link = 'TSPreProc' },
              ['@property'] = { link = 'TSProperty' },
              ['@punctuation.bracket'] = { link = 'TSPunctBracket' },
              ['@punctuation.delimiter'] = { link = 'TSPunctDelimiter' },
              ['@punctuation.special'] = { link = 'TSPunctSpecial' },
              ['@repeat'] = { link = 'TSRepeat' },
              ['@storageclass'] = { link = 'TSStorageClass' },
              ['@storageclass.lifetime'] = { link = 'TSStorageClassLifetime' },
              ['@strike'] = { link = 'TSStrike' },
              ['@string'] = { link = 'TSString' },
              ['@string.escape'] = { link = 'TSStringEscape' },
              ['@string.regex'] = { link = 'TSStringRegex' },
              ['@string.special'] = { link = 'TSStringSpecial' },
              ['@symbol'] = { link = 'TSSymbol' },
              ['@tag'] = { link = 'TSTag' },
              ['@tag.attribute'] = { link = 'TSTagAttribute' },
              ['@tag.delimiter'] = { link = 'TSTagDelimiter' },
              ['@text'] = { link = 'TSText' },
              ['@text.danger'] = { link = 'TSDanger' },
              ['@text.diff.add'] = { link = 'diffAdded' },
              ['@text.diff.delete'] = { link = 'diffRemoved' },
              ['@text.emphasis'] = { link = 'TSEmphasis' },
              ['@text.environment'] = { link = 'TSEnvironment' },
              ['@text.environment.name'] = { link = 'TSEnvironmentName' },
              ['@text.literal'] = { link = 'TSLiteral' },
              ['@text.math'] = { link = 'TSMath' },
              ['@text.note'] = { link = 'TSNote' },
              ['@text.reference'] = { link = 'TSTextReference' },
              ['@text.strike'] = { link = 'TSStrike' },
              ['@text.strong'] = { link = 'TSStrong' },
              ['@text.title'] = { link = 'TSTitle' },
              ['@text.todo'] = { link = 'TSTodo' },
              ['@text.todo.checked'] = { link = 'Teal' },
              ['@text.todo.unchecked'] = { link = 'Ignore' },
              ['@text.underline'] = { link = 'TSUnderline' },
              ['@text.uri'] = { link = 'TSURI' },
              ['@text.warning'] = { link = 'TSWarning' },
              ['@todo'] = { link = 'TSTodo' },
              ['@type'] = { link = 'TSType' },
              ['@type.builtin'] = { link = 'TSTypeBuiltin' },
              ['@type.definition'] = { link = 'TSTypeDefinition' },
              ['@type.qualifier'] = { link = 'TSTypeQualifier' },
              ['@uri'] = { link = 'TSURI' },
              ['@variable'] = { link = 'TSVariable' },
              ['@variable.builtin'] = { link = 'TSVariableBuiltin' },

              ['@lsp.type.class'] = { link = 'TSType' },
              ['@lsp.type.comment'] = { link = 'TSComment' },
              ['@lsp.type.decorator'] = { link = 'TSFunction' },
              ['@lsp.type.enum'] = { link = 'TSType' },
              ['@lsp.type.enumMember'] = { link = 'TSProperty' },
              ['@lsp.type.events'] = { link = 'TSLabel' },
              ['@lsp.type.function'] = { link = 'TSFunction' },
              ['@lsp.type.interface'] = { link = 'TSType' },
              ['@lsp.type.keyword'] = { link = 'TSKeyword' },
              ['@lsp.type.macro'] = { link = 'TSConstMacro' },
              ['@lsp.type.method'] = { link = 'TSMethod' },
              ['@lsp.type.modifier'] = { link = 'TSTypeQualifier' },
              ['@lsp.type.namespace'] = { link = 'TSNamespace' },
              ['@lsp.type.number'] = { link = 'TSNumber' },
              ['@lsp.type.operator'] = { link = 'TSOperator' },
              ['@lsp.type.parameter'] = { link = 'TSParameter' },
              ['@lsp.type.property'] = { link = 'TSProperty' },
              ['@lsp.type.regexp'] = { link = 'TSStringRegex' },
              ['@lsp.type.string'] = { link = 'TSString' },
              ['@lsp.type.struct'] = { link = 'TSType' },
              ['@lsp.type.type'] = { link = 'TSType' },
              ['@lsp.type.typeParameter'] = { link = 'TSTypeDefinition' },
              ['@lsp.type.variable'] = { link = 'TSVariable' },
            }
          end,
        },
      })
    end,
  },
}
